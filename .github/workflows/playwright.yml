name: Playwright

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/config.json'
      - 'bin/**'
      - '.gitignore'
      - 'docs/**'
  schedule:
    - cron: '30 08 * * 0,1,2,3,4,5'
  workflow_dispatch:
    inputs:
      reporter:
        required: false
        description: 'Select a reporter'
        type: choice
        options:
          - allure-playwright
          - html
          - blob
          - list
        default: allure-playwright
      path-to-results:
        required: false
        description: 'Provide path to reporter files'
        default: allure-results
        type: choice
        options:
          - test-results/
          - tests/playwright/blob-report
          - allure-results
      fail_fast:
        type: boolean
        required: true
        description: 'Cancel tests when one of them fails'
        default: false
      tag:
        description: 'Provide @tag or a keyword'
        required: false

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build-plugin:
    name: Build plugin
    uses: ./.github/workflows/build.yml

  Playwright:
    name: Playwright test - ${{ matrix.shardIndex }} on PHP 8.0
    runs-on: ubuntu-latest
    needs: [build-plugin]
    if: ${{ ( github.event.pull_request.title == null || needs.build-plugin.outputs.changelog_diff ) && github.event.inputs.tag == '' }}
    strategy:
      fail-fast: ${{ inputs.fail_fast || false }}
      matrix:
        shardIndex: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
        shardTotal: [ 10 ]
        include:
          - shardIndex: "elements-regression"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Install Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install dependencies
        run: |
          npm ci
          sed -i -e "s/image: 'mariadb:lts'/image: 'mariadb:11.2.4-jammy'/g" node_modules/@wordpress/env/lib/build-docker-compose-config.js
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-plugin.outputs.artifact_name }}
          path: ./build
      - name: Update wp-env.json file
        env:
          PHP_VERSION: '8.0'
          WP_CORE_VERSION: 'latest'
        run: node ./.github/scripts/build-wp-env.js
      - name: Install WordPress environment
        run: |
          npm run start-local-server
      - name: Update WordPress to nightly build
        if: ${{ github.event_name == 'schedule' }}
        run: npx wp-env run cli wp core update https://wordpress.org/nightly-builds/wordpress-latest.zip
      - name: Setup test data
        run: npm run test:setup:playwright
      - name: WordPress debug information
        run: |
          npx wp-env run cli wp core version
          npx wp-env run cli wp --info
      - name: Install playwright/test
        run: |
          npx playwright install chromium
      - name: Run Playwright tests
        if: ${{ matrix.shardIndex != 'elements-regression' }}
        run: npm run test:playwright -- --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} --reporter=json ./test-results/results.json
      - name: Run element regression tests
        if: ${{ matrix.shardIndex == 'elements-regression' }}
        run: npm run test:playwright:elements-regression -- --reporter=json ./test-results/results.json
      - name: Upload Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results-${{ matrix.shardIndex }}
          path: ${{ inputs.path-to-results || 'test-results/' }}
          if-no-files-found: ignore
          retention-days: 2
      - name: Convert JSON to NDJSON for Elasticsearch
        run: |
          node -e "
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('./test-results/results.json', 'utf-8'));
          const documents = results.suites.flatMap(suite => suite.tests.map(test => ({
            suiteName: suite.title,
            testName: test.title,
            outcome: test.outcome,
            duration: test.duration,
            errors: test.errors,
            startTime: suite.startTime,
          })));
          const ndjson = documents.map(doc => JSON.stringify({ index: {} }) + '\\n' + JSON.stringify(doc)).join('\\n');
          fs.writeFileSync('./test-results/results.ndjson', ndjson);
          "
      - name: Upload Results to Elasticsearch
        if: always()
        run: |
          curl -X POST "https://e8cfc4f31c5e424cb57b05743dcf4ab4.us-central1.gcp.cloud.es.io/playwright-results/_bulk" \
          -H "Content-Type: application/x-ndjson" \
          -H "Authorization: ApiKey ${{ secrets.ELASTIC_API_KEY }}" \
          --data-binary @./test-results/results.ndjson
