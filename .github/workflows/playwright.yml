name: Playwright

on:
  pull_request:
  schedule:
    - cron: '30 08 * * 0,1,2,3,4,5'
  workflow_dispatch:
      inputs:
        reporter:
          required: false
          description: 'Select a reporter'
          type: choice
          options:
            - allure-playwright
            - html
            - blob
            - list
          default: allure-playwright
        path-to-results:
          required: false
          description: 'Provide path to reporter files'
          default: allure-results
          type: choice
          options:
            - test-results/
            - tests/playwright/blob-report
            - allure-results
        fail_fast:
            type: boolean
            required: true
            description: 'Cancel tests when one of them fails'
            default: false

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build-plugin:
    name: Build plugin
    uses: ./.github/workflows/build.yml
  Playwright:
    name: Playwright test - ${{ matrix.shardIndex }} on PHP 8.0
    runs-on: ubuntu-latest
    needs: [build-plugin]
    if: ${{ github.event.pull_request.title == null || needs.build-plugin.outputs.changelog_diff }}
    strategy:
      fail-fast: ${{ inputs.fail_fast || true }}
      matrix:
        shardIndex: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
        shardTotal: [ 10 ]
        include:
        - shardIndex: "elements-regression"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Install Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install dependencies
        run: |
          npm ci
          sed -i -e "s/image: 'mariadb:lts'/image: 'mariadb:11.2.4-jammy'/g" node_modules/@wordpress/env/lib/build-docker-compose-config.js
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-plugin.outputs.artifact_name }}
          path: ./build
      - name: Update wp-env.json file
        env:
          PHP_VERSION: '8.0'
          WP_CORE_VERSION: 'latest'
        run: node ./.github/scripts/build-wp-env.js
      - name: Install WordPress environment
        run: |
          npm run start-local-server
      - name: Update wordpress to nightly build
        if: ${{ github.event_name == 'schedule' }}
        run: npx wp-env run cli wp core update https://wordpress.org/nightly-builds/wordpress-latest.zip
      - name: Setup test data
        run: npm run test:setup:playwright
      - name: WordPress debug information
        run: |
          npx wp-env run cli wp core version
          npx wp-env run cli wp --info
      - name: Install playwright/test
        run: |
          npx playwright install chromium
      - name: Run Playwright tests
        if: ${{ matrix.shardIndex != 'elements-regression' }}
        run: npm run test:playwright  -- --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} --reporter=${{ 'list,github,json=tests/playwright/test-results.json' }}
      - name: Check if test-results.json exists
        run: |
          if [ -f tests/playwright/test-results.json ]; then
            echo "✅ test-results.json found."
            echo "Contents of test-results.json:"
            cat tests/playwright/test-results.json | jq '.' || cat tests/playwright/test-results.json
          else
            echo "❌ test-results.json not found."
            exit 1
          fi

      - name: Continue workflow if file exists
        if: success()
        run: echo "File exists, proceeding with next steps."
      - name: Verify test-results.json structure
        run: |
          if [ -f tests/playwright/test-results.json ]; then
            echo "test-results.json found. Displaying contents:"
            cat tests/playwright/test-results.json | jq '.'
          else
            echo "test-results.json not found!"
            exit 1
          fi
      - name: Run element regression tests
        if: ${{ matrix.shardIndex == 'elements-regression' }}
        run: npm run test:playwright:elements-regression -- --reporter=${{ inputs.reporter || 'list,github' }}
      - name: Upload results to Elasticsearch
        env:
          ELASTICSEARCH_NODE: 'https://7b37ac31dc964212bb4a3e868ee14896.us-central1.gcp.cloud.es.io:443'
          ELASTICSEARCH_API_KEY: 'UDVjblg1TUI2NkhqYUtaWDJScUI6SUdYSjh0Qm9TSWlZcUVNdkJTVFVhZw=='
        run: |
            node <<'EOF'
            const fs = require('fs');
            const { Client } = require('@elastic/elasticsearch');

            const esClient = new Client({
              node: process.env.ELASTICSEARCH_NODE,
              auth: {
                apiKey: process.env.ELASTICSEARCH_API_KEY,
              },
            });

            function removeANSI(text) {
              return text.replace(/\u001b\[[0-9;]*m/g, '');
            }

            async function run() {
              try {
                const rawData = fs.readFileSync('tests/playwright/test-results.json', 'utf-8');
                const testResults = JSON.parse(rawData);

                const indexName = 'playwright-test-results';
                const bulkBody = [];

                if (testResults.suites && Array.isArray(testResults.suites)) {
                  testResults.suites.forEach((suite) => {
                    if (suite.specs && Array.isArray(suite.specs)) {
                      suite.specs.forEach((spec) => {
                        if (spec.tests && Array.isArray(spec.tests)) {
                          spec.tests.forEach((test) => {
                            if (test.results && Array.isArray(test.results)) {
                              test.results.forEach((result) => {
                                console.log('Adding result to bulkBody:', test.title, result.status); // Добавляем лог
                                bulkBody.push({
                                  index: { _index: indexName },
                                });
                                bulkBody.push({
                                suiteTitle: suite.title,
                                specTitle: spec.title,
                                testName: `${suite.title} / ${spec.title}`,
                                status: result.status || 'unknown',
                                duration: result.duration || 0,
                                errorMessage: result.error ? removeANSI(result.error.message) : null,
                                timestamp: new Date(result.startTime || Date.now()).toISOString(),
                              });
                            });
                          }
                        });
                      }
                    });
                  }
                });
              }

            await esClient.index({
                  index: 'playwright-test-results',
                  document: {
                    suiteTitle: 'Test Suite',
                    specTitle: 'Test Spec',
                    testName: 'Sample Test',
                    status: 'passed',
                    duration: 123,
                    timestamp: new Date().toISOString(),
                  },
                });
                console.log('Test document sent successfully!');


            if (bulkBody.length > 0) {
                  const bulkResponse = await esClient.bulk({ refresh: true, body: bulkBody });
                  if (bulkResponse.body && bulkResponse.body.errors) {
                    bulkResponse.body.items.forEach((item, index) => {
                      if (item.index && item.index.error) {
                        console.error(`Indexing error for document ${index}:`, item.index.error);
                      }
                    });
                  }
                }
              } catch (error) {
                console.error('An error occurred:', error);
              }
            }

            run();
            EOF
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results-${{ matrix.shardIndex }}
          path: ${{ inputs.path-to-results || 'test-results/' }}
          if-no-files-found: ignore
          retention-days: 2

  test-result:
    needs: Playwright
    if: ${{ always() }} # Will be run even if 'Playwright' matrix will be skipped
    runs-on: ubuntu-22.04
    name: Playwright - Test Results
    steps:
      - name: Test status
        run: echo "Test status is - ${{ needs.Playwright.result }}"
      - name: Checkout source code
        if: ${{ needs.Playwright.result == 'failure' && github.event_name == 'schedule' }}
        uses: actions/checkout@v4
      - name: Send slack message
        if: ${{ needs.Playwright.result == 'failure' && github.event_name == 'schedule' }}
        uses: ./.github/workflows/post-to-slack
        with:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_TAG_CHANNELS: ${{ secrets.TEST_AUTOMATION_RESULTS }}
          PAYLOAD: |
            {
              "text": "Elementor Core: Playwright with WordPress nightly has failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Elementor Core: Playwright with WordPress nightly failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
      - name: Check Playwright matrix status
        if: ${{ needs.Playwright.result != 'success' && needs.Playwright.result != 'skipped' }}
        run: exit 1
