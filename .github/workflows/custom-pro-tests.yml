name: Playwright - Custom Pro

on:
  pull_request:
    types:
      - labeled
      - reopened

permissions:
  contents: write
  id-token: "write"

env:
  SPREADSHEET_ID: '19K69k2H_NciROVMxu7_3efswiocQxaVvkTj-1zOviys'

jobs:
  parse-pro-label-branch:
    name: Parse pro label branch
    runs-on: ubuntu-22.04
    if: startsWith( github.event.pull_request.labels.*.name, 'pw-pro' )
    outputs:
      pro_branch: ${{ steps.parse_pro_label_branch.outputs.pro_branch }}
    steps:
      - name: parse pro label branch
        id: parse_pro_label_branch
        run: echo "pro_branch=$(echo ${{ github.event.pull_request.labels.*.name }} | cut -d'/' -f2)\n" >> $GITHUB_OUTPUT
  checkout-pro:
    name: Checkout pro source code
    runs-on: ubuntu-22.04
    if: startsWith( github.event.pull_request.labels.*.name, 'pw-pro' )
    needs: parse-pro-label-branch
    steps:
      - name: Checkout pro source code with custom branch
        uses: actions/checkout@v4
        with:
          ref: ${{ jobs.parse-pro-label-branch.outputs.pro_branch }}
          repository: elementor/elementor-pro
  build-pro-plugin:
    name: Build Plugin Pro
    uses: 'elementor/elementor-pro/.github/workflows/build.yml@main'
  build-core-plugin:
    name: Build Plugin Core
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Core code
        uses: actions/checkout@v4
        with:
          repository: elementor/elementor
      - name: build plugin core
        id: build_plugin_core
        uses: ./.github/workflows/build.yml
      - name: Install Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: get pro build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_plugin_pro.outputs.artifact_name }}
          path: ./elementor-pro.zip
      - name: get core build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_plugin_core.outputs.artifact_name }}
          path: ./elementor.zip
      - name: Save builds to cache
        uses: actions/cache/save@v4
        with:
          path: |
            ./elementor-pro-*.zip
            ./elementor.zip
          key: save_custom_core_builds-${{ github.sha }}
      - name: Generate list using Markdown
        run: |
          echo "## Build data ##" >> $GITHUB_STEP_SUMMARY
          echo "| Repo  | Branch                     | Version                |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|----------------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Elementor Core  | ${{ inputs.core_branch || 'main'}}   | ${{ env.CORE_PACKAGE_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Elementor Pro   | ${{ github.ref_name }}   | ${{ env.PRO_PACKAGE_VERSION }} |" >> $GITHUB_STEP_SUMMARY

  get-latest-hello-theme:
    name: Get latest Hello Theme from github
    runs-on: ubuntu-22.04
    outputs:
      artifact_name: 'hello-elementor.${{env.HELLO_VERSION}}'
    steps:
      - name: Checkout source code from custom branch
        if: inputs.hello_theme_branch != ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: elementor/hello-theme
          ref: ${{inputs.hello_theme_branch}}
      - name: Install Node.js 20.x
        if: inputs.hello_theme_branch != ''
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install Dependencies
        if: inputs.hello_theme_branch != ''
        run: npm ci
      - name: build hello theme
        if: inputs.hello_theme_branch != ''
        run: |
          npm run zip
          HELLO_VERSION=$(node -p -e "require('./package.json').version")
          echo "HELLO_VERSION=${HELLO_VERSION}" >> $GITHUB_ENV
      - name: Upload Elementor Pro Build zip file to github
        if: inputs.hello_theme_branch != ''
        uses: actions/upload-artifact@v4
        with:
          name: hello-elementor.${{env.HELLO_VERSION}}
          path: hello-elementor.${{env.HELLO_VERSION}}.zip
          retention-days: 1

  Playwright:
    name: Playwright - ${{ matrix.shardIndex }}
    needs: [prepare-env, get-latest-hello-theme]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, "template-tests" ]
        shardTotal: [ 20 ]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install Dependencies
        run: |
          npm ci
          sed -i -e "s/image: 'mariadb:lts'/image: 'mariadb:11.2.4-jammy'/g" node_modules/@wordpress/env/lib/build-docker-compose-config.js
      - name: Restore builds from cache
        uses: actions/cache/restore@v4
        id: restore-build
        with:
          path: |
            ./elementor-pro-*.zip
            ./elementor.zip
          key: save_custom_core_builds-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Unzip builds
        run: |
          unzip -q elementor-pro-*.zip
          unzip -q elementor.zip
      - name: Download Hello Theme
        if: inputs.hello_theme_branch != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.get-latest-hello-theme.outputs.artifact_name }}
          path: ./
      - name: Unzip Hello theme
        if: inputs.hello_theme_branch != ''
        run: unzip -q ${{ needs.get-latest-hello-theme.outputs.artifact_name }}
      - name: Replace hello theme version to latest in wp-env json
        if: inputs.hello_theme_branch != ''
        run: sed -i -E "s/https:\/\/downloads.wordpress.org\/theme\/hello-elementor.zip/.\/hello-elementor/g" .wp-env.json
      - name: Update wp-env.json file
        env:
          PHP_VERSION: '8.0'
          WP_CORE_VERSION: 'latest'
        run: node ./.github/scripts/build-wp-env.js
      - name: Install WordPress environment
        run: |
          npm run start-local-server
      - name: Import Sample Data
        run: npm run import-sample-data
      - name: Import Taxonomy Sample Data
        run: npm run import-taxonomy-sample-data
      - name: Run SQL query to activate Pro
        env:
          E2E_PRO_LICENSE: ${{ secrets.E2E_PRO_LICENSE }}
        run: |
          node ./.github/scripts/playwright-sql-query.js
          npx wp-env run cli wp db query < query.sql
      - name: Activate performance experiments
        run: |
          npx wp-env run cli bash -c 'bash elementor-config/setup-experiments.sh'
      - name: Reset DB properties
        run: |
          npx wp-env run cli bash -c 'bash elementor-config/reset-db-props.sh'
      - name: Deactivate plugins
        run: |
          npm run deactivate-plugins
      - name: WordPress debug information
        run: |
          ls -l
          npx wp-env run cli wp plugin list
          npx wp-env run cli wp core version
          npx wp-env run cli wp --info
      - name: Install playwright/test
        run: npx playwright install chromium
      - name: Run template tests
        if: ${{ matrix.shardIndex == 'template-tests' }}
        run: npm run test:playwright:template-tests -- --reporter='list,github,allure-playwright'
      - name: Run Playwright tests
        if: ${{ matrix.shardIndex !='template-tests' }}
        run: npm run test:playwright -- --grep-invert="@pluginTester|@essentialLicense" --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} --reporter='list,github,allure-playwright'
      - uses: actions/upload-artifact@v4
        name: Upload Allure result
        if: always()
        with:
          name: allure-results-${{ matrix.shardIndex }}
          path: allure-results
          if-no-files-found: ignore
          retention-days: 1
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-test-results-${{ matrix.shardIndex }}
          path: test-results/
          if-no-files-found: ignore
          retention-days: 3

  Build-report:
    needs: Playwright
    runs-on: ubuntu-22.04
    name: Merge reports and get flaky
    if: always()
    steps:
      - name: Pull repo
        if: github.event_name == 'schedule'|| github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
      - name: Download allure data
        if: github.event_name == 'schedule'|| github.event_name == 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          pattern:  allure-results-*
          path: allure-results
          merge-multiple: true
      - name: Install Node.js 20.x
        if: github.event_name == 'schedule'|| github.event_name == 'workflow_dispatch'
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Build test report
        if: github.event_name == 'schedule'|| github.event_name == 'workflow_dispatch'
        run: |
          npm ci
          cd ./allure-results && npx allure generate clean ./ --output ../allure-report
      - uses: actions/upload-artifact@v4
        if: github.event_name == 'schedule'|| github.event_name == 'workflow_dispatch'
        name: Upload generated Allure report
        with:
          name: allure-report
          path: allure-report
          if-no-files-found: ignore
          retention-days: 1
      - name: Execute script
        if: github.event_name == 'schedule'|| github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        id: get_flaky
        env:
          ALLURE_SUITS_PATH: ../../allure-report/data/suites.json
          ALLURE_SUMMARY_PATH: ../../allure-report/widgets/summary.json
          SPREADSHEET_ID: ${{env.SPREADSHEET_ID}}
        with:
          script: |
            const script = require('./.github/scripts/get-flaky-tests.js')
            return await script( {core} )
          result-encoding: string
      - name: Update spreadsheet
        if: steps.get_flaky.outputs.result != '[]'
        id: update_worksheet
        uses: ./.github/workflows/update-google-spreadsheet
        with:
          GCP_IDENTITY_PROVIDER: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          GCP_IDENTITY_PROVIDER_ACCOUNT: ${{ secrets.GCP_IDENTITY_PROVIDER_ACCOUNT }}
          SPREADSHEET_ID: ${{env.SPREADSHEET_ID}}
          DATA: ${{steps.get_flaky.outputs.result}}
          RANGE: test1!A1:D5

  test-result:
    needs: Playwright
    if: ${{ always() }} # Will be run even if 'Playwright' matrix will be skipped
    runs-on: ubuntu-22.04
    name: Playwright - Test Results
    steps:
      - name: Test status
        run: echo "Test status is - ${{ needs.Playwright.result }}"
      - name: Checkout source code
        if:  ${{ needs.Playwright.result == 'failure' && github.event_name == 'schedule'}}
        uses: actions/checkout@v4
      - name: Send slack message
        if: ${{ needs.Playwright.result == 'failure' && github.event_name == 'schedule'}}
        uses: ./.github/workflows/post-to-slack
        with:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_TAG_CHANNELS: ${{ secrets.TEST_AUTOMATION_RESULTS }}
          PAYLOAD: |
            {
              "text": "Playwright Custom Core failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Playwright Custom Core failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
      - name: Check Playwright matrix status
        if: ${{ needs.Playwright.result != 'success' && needs.Playwright.result != 'skipped' }}
        run: exit 1
